{"version":3,"file":"index.modern.js","sources":["../src/index.js"],"sourcesContent":["/**\r\n * Copyright (c) 2019, Anton Babakhin\r\n * All rights reserved. (MIT Licensed)\r\n * \r\n * critical-css-parser\r\n */\r\n\r\nconst httpServer = require('http-server');\r\nconst puppeteer = require('puppeteer');\r\nconst dropcss = require('dropcss');\r\nconst { get } = require('axios');\r\n\r\n/**\r\n * Receive critical and other CSS\r\n * @param  {object} options Options\r\n * @return {Promise<{ critical: string, rest: string }>} Result object with critical css and rest css\r\n */\r\nasync function criticalCSSParser( options ) {\r\n  \tif( options.type === 'HTML' ) {\r\n\t\tconst { html = '', css = '', whitelist = /#fooBazBarAboveTheFold8917/, minify = false } = options;\r\n\t\t\r\n\t\tconst browser = await puppeteer.launch();\r\n\r\n\t\t// Puppeteer page with desktop version\r\n\t\tconst page = await browser.newPage();\r\n\t\tawait page.setDefaultNavigationTimeout( 60000 );\r\n\t\tawait page.setContent(html, { waitUntil: 'networkidle2'\t});\r\n\t\tawait page.addStyleTag({ content: css });\r\n\t\tawait page.setViewport({ width: 1920, height: 1200 });\r\n\r\n\t\t// Puppeteer page with mobile version\r\n\t\tconst page2 = await browser.newPage();\r\n\t\tawait page2.setDefaultNavigationTimeout( 60000 );\r\n\t\tawait page2.setContent(html, { waitUntil: 'networkidle2' });\r\n\t\tawait page2.addStyleTag({ content: css });\r\n\t\tawait page2.setViewport({ width: 480, height: 650, isMobile: true, hasTouch: true });\r\n\t\t\r\n\t\tconst aboveTheFold = await aboveTheFoldHTML( page, 1200 );\r\n\t\tconst aboveTheFoldMob = await aboveTheFoldHTML( page2, 650 );\r\n\r\n\t\tawait browser.close();\r\n\r\n\t\tconst result = extract( aboveTheFold, aboveTheFoldMob, css, whitelist, minify );\r\n\t\treturn result;\r\n\r\n\t} else if( options.type === 'URL' ) {\r\n\t\tconst { URL = '', enableGoogleFonts = 0, whitelist = /#fooBazBarAboveTheFold8917/, minify = false } = options;\r\n\t\t\r\n\t\tconst browser = await puppeteer.launch();\r\n\r\n\t\t// Puppeteer page with desktop version\r\n\t\tconst page = await browser.newPage();\r\n\t\tawait page.setDefaultNavigationTimeout( 60000 );\r\n\t\tawait page.goto(URL, { waitUntil: 'networkidle2' });\t\t\r\n\t\tawait page.setViewport({ width: 1920, height: 1200 });\r\n\t\tlet styleHrefs = await page.$$eval('link[rel=stylesheet]', els => Array.from(els).map(s => s.href));\r\n\t\tif( !enableGoogleFonts ) {\r\n\t\t\tstyleHrefs = styleHrefs.filter( href => href.indexOf('fonts.googleapis.com') === -1 );\r\n\t\t}\r\n\r\n\t\t// Puppeteer page with mobile version\r\n\t\tconst page2 = await browser.newPage();\r\n\t\tawait page2.setDefaultNavigationTimeout( 60000 );\r\n\t\tawait page2.goto(URL, { waitUntil: 'networkidle2' });\t\t\r\n\t\tawait page2.setViewport({ width: 480, height: 650, isMobile: true, hasTouch: true }); \r\n\t\t\r\n\t\tconst aboveTheFold = await aboveTheFoldHTML( page, 1200 );\r\n\t\tconst aboveTheFoldMob = await aboveTheFoldHTML( page2, 650 );\r\n\r\n\t\tawait browser.close();\r\n\r\n\t\t// Concatenate all styles \r\n\t\tlet css = '';\r\n\t\tawait Promise.all(styleHrefs.map(async href => {\r\n\t\t\tlet { data } = await get(href);\r\n\t\t\tcss += data;\r\n\t\t}));\r\n\r\n\t\tconst result = extract( aboveTheFold, aboveTheFoldMob, css, whitelist, minify );\r\n\t\treturn result;\t\r\n\t\t\r\n\t} else if( options.type === 'localServer' ) {\r\n\t\tconst { entrypoint = '', filename = 'index.html', enableGoogleFonts = 0, whitelist = /#fooBazBarAboveTheFold8917/, minify = false } = options;\r\n\t\t\r\n\t\t// Create local server to open the page\r\n\t\tconst server = httpServer.createServer({root: entrypoint});\r\n\t\tserver.listen(6543);\r\n\t\t\r\n\t\tconst browser = await puppeteer.launch();\r\n\r\n\t\t// Puppeteer page with desktop version\r\n\t\tconst page = await browser.newPage();\r\n\t\tawait page.setDefaultNavigationTimeout( 60000 );\r\n\t\tawait page.goto(`http://127.0.0.1:6543/${filename}`, { waitUntil: 'networkidle2' });\t\t\r\n\t\tawait page.setViewport({ width: 1920, height: 1200 });\r\n\t\tlet styleHrefs = await page.$$eval('link[rel=stylesheet]', els => Array.from(els).map(s => s.href));\r\n\t\tif( !enableGoogleFonts ) {\r\n\t\t\tstyleHrefs = styleHrefs.filter( href => href.indexOf('fonts.googleapis.com') === -1 );\r\n\t\t}\r\n\r\n\t\t// Puppeteer page with mobile version\r\n\t\tconst page2 = await browser.newPage();\r\n\t\tawait page2.setDefaultNavigationTimeout( 60000 );\r\n\t\tawait page2.goto(`http://127.0.0.1:6543/${filename}`, { waitUntil: 'networkidle2' });\t\t\r\n\t\tawait page2.setViewport({ width: 480, height: 650, isMobile: true, hasTouch: true }); \r\n\t\t\r\n\t\tconst aboveTheFold = await aboveTheFoldHTML( page, 1200 );\r\n\t\tconst aboveTheFoldMob = await aboveTheFoldHTML( page2, 650 );\r\n\r\n\t\tawait browser.close();\r\n\r\n\t\t// Concatenate all styles \r\n\t\tlet css = '';\r\n\t\tawait Promise.all(styleHrefs.map(async href => {\r\n\t\t\tlet { data } = await get(href);\r\n\t\t\tcss += data;\r\n\t\t}));\r\n\r\n\t\tserver.close();\r\n\r\n\t\tconst result = extract( aboveTheFold, aboveTheFoldMob, css, whitelist, minify );\r\n\t\treturn result;\t\r\n\t}\r\n}\r\n\r\n/**\r\n * Receive above-the-fold HTML\r\n * @param  {object} page Page from Puppeteer\r\n * @param  {number} height Height of viewport \r\n * @return {Promise<string>} Result html\r\n */\r\nasync function aboveTheFoldHTML( page, height ) {\r\n\tawait page.$$eval('body *:not(script):not(style)', ( elems, height ) => {\r\n\t\tArray.from(elems).forEach(elem => {\t\t\t\r\n\t\t\tif( elem.getBoundingClientRect()['top'] + pageYOffset > height ) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\t// Remove element below the fold\r\n\t\t\t\t\telem.remove();\r\n\t\t\t\t} catch( e ) {\r\n\t\t\t\t\tconsole.log(e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}, height);\r\n\r\n\tconst html = await page.content();\r\n\treturn html;\r\n}\r\n\r\n/**\r\n * Extract critical and rest CSS from HTML\r\n * @param  {string} deskHTML HTML of desktop version\r\n * @param  {string} mobHTML HTML of mobile version\r\n * @param  {string} css CSS \r\n * @param  {RegExp} whitelist Regular Expression of needed tags \r\n * @return {Promise<{ critical: string, rest: string }>} Result object with critical css and rest css\r\n */\r\nfunction extract( deskHTML, mobHTML, css, whitelist, minify ) {\r\n\t// Receive above-the-fold css-selectors of desktop version\r\n\tlet resDesk = dropcss({\r\n\t\thtml: deskHTML,\r\n\t\tcss,\r\n\t\tshouldDrop: ( sel ) => {\r\n\t\t\tif ( whitelist.test( sel ) )\r\n\t\t\t\t\treturn false;\r\n\t\t\telse {\t\t\t\t\t\t\t\r\n\t\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t},\r\n\t});\r\n\r\n\t// Receive above-the-fold css-selectors of mobile version\r\n\tlet resMob = dropcss({\r\n\t\thtml: mobHTML,\r\n\t\tcss,\r\n\t\tshouldDrop: ( sel ) => {\r\n\t\t\tif ( whitelist.test( sel ) )\r\n\t\t\t\t\treturn false;\r\n\t\t\telse {\t\t\t\t\t\t\t\r\n\t\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t},\r\n\t});\r\n\r\n\tlet selectors = new Set();\r\n\tresDesk.sels.forEach( sel => selectors.add( sel ) );\r\n\tresMob.sels.forEach( sel => selectors.add( sel ) );\r\n\r\n\tlet above = dropcss({\r\n\t\thtml: '',\r\n\t\tcss,\r\n\t\tshouldDrop: sel => !selectors.has( sel ),\r\n\t});\r\n\r\n\tlet rest = dropcss({\r\n\t\thtml: '',\r\n\t\tcss,\r\n\t\tshouldDrop: sel => selectors.has( sel ),\r\n\t});\r\n\r\n\tif ( minify ) {\r\n\t\tconst csso = require('csso');\r\n\t\tabove.css = csso.minify( above.css ).css;\r\n\t\trest.css = csso.minify( rest.css ).css;\r\n\t}\r\n\r\n\treturn { critical: above.css, rest: rest.css };\r\n}\r\n\r\nmodule.exports = criticalCSSParser;\r\n"],"names":["httpServer","require","puppeteer","dropcss","get","async","aboveTheFoldHTML","page","height","$$eval","elems","Array","from","forEach","elem","getBoundingClientRect","pageYOffset","remove","e","console","log","content","extract","deskHTML","mobHTML","css","whitelist","minify","resDesk","html","shouldDrop","sel","test","resMob","selectors","Set","sels","add","above","has","rest","csso","critical","module","exports","options","type","browser","launch","newPage","setDefaultNavigationTimeout","setContent","waitUntil","addStyleTag","setViewport","width","page2","isMobile","hasTouch","aboveTheFold","aboveTheFoldMob","close","URL","enableGoogleFonts","goto","styleHrefs","els","map","s","href","filter","indexOf","Promise","all","data","entrypoint","filename","server","createServer","root","listen"],"mappings":"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"}