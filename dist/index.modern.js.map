{"version":3,"file":"index.modern.js","sources":["../src/index.js"],"sourcesContent":["/**\r\n * Copyright (c) 2021, Anton Babakhin\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * critical-css-parser\r\n */\r\n\r\nconst httpServer = require('http-server');\r\nconst puppeteer = require('puppeteer');\r\nconst dropcss = require('dropcss');\r\nconst { get } = require('axios');\r\n\r\n/**\r\n * Receive critical and other CSS\r\n * @param  {object} options Options\r\n * @return {Promise<{ critical: string, rest: string }>} Result object with critical css and rest css\r\n */\r\nasync function criticalCSSParser(options) {\r\n  if (options.type === 'HTML') {\r\n    const {\r\n      html = '',\r\n      css = '',\r\n      whitelist = /#fooBazBarAboveTheFold8917/,\r\n      minify = false\r\n    } = options;\r\n\r\n    const { aboveTheFold, aboveTheFoldMob } = await puppeteerResources({\r\n      html,\r\n      css,\r\n      type: options.type\r\n    });\r\n\r\n    return extract(aboveTheFold, aboveTheFoldMob, css, whitelist, minify);\r\n  } else if (options.type === 'URL') {\r\n    const {\r\n      URL = '',\r\n      enableGoogleFonts = 0,\r\n      whitelist = /#fooBazBarAboveTheFold8917/,\r\n      minify = false\r\n    } = options;\r\n\r\n    const { aboveTheFold, aboveTheFoldMob, css } = await puppeteerResources({\r\n      enableGoogleFonts,\r\n      url: URL,\r\n      type: options.type\r\n    });\r\n\r\n    return extract(aboveTheFold, aboveTheFoldMob, css, whitelist, minify);\r\n  } else if (options.type === 'localServer') {\r\n    const {\r\n      entrypoint = '',\r\n      filename = 'index.html',\r\n      enableGoogleFonts = 0,\r\n      whitelist = /#fooBazBarAboveTheFold8917/,\r\n      minify = false\r\n    } = options;\r\n\r\n    // Create local server to open the page\r\n    const server = httpServer.createServer({ root: entrypoint });\r\n    server.listen(6543);\r\n\r\n    const { aboveTheFold, aboveTheFoldMob, css } = await puppeteerResources({\r\n      enableGoogleFonts,\r\n      url: `http://127.0.0.1:6543/${filename}`,\r\n      type: options.type\r\n    });\r\n\r\n    server.close();\r\n\r\n    return extract(aboveTheFold, aboveTheFoldMob, css, whitelist, minify);\r\n  }\r\n}\r\n\r\n/**\r\n * Receive above-the-fold HTML\r\n * @param  {object} page Page from Puppeteer\r\n * @param  {number} height Height of viewport\r\n * @return {Promise<string>} Result html\r\n */\r\nasync function getAboveTheFoldHTML(page, height) {\r\n  await page.$$eval('body *:not(script):not(style)', (elems, height) => {\r\n    Array.from(elems).forEach(elem => {\r\n      try {\r\n        const computedStyle = window.getComputedStyle(elem);\r\n        let top = 0;\r\n        let marginTop = 0;\r\n\r\n        const computedTop = computedStyle.top;\r\n        if (computedTop.indexOf('px') !== -1) {\r\n          top = Math.abs(Number.parseInt(computedTop, 10));\r\n        } else if (computedTop.indexOf('%') !== -1) {\r\n          const parentHeight = elem.parentElement.offsetHeight;\r\n          const percent = Math.abs(Number.parseInt(computedTop, 10));\r\n          top = (parentHeight * percent) / 100;\r\n        }\r\n\r\n        const computedMarginTop = computedStyle.marginTop;\r\n        marginTop = Math.abs(Number.parseInt(computedMarginTop, 10));\r\n\r\n        if (elem.getBoundingClientRect().top - marginTop - top + pageYOffset > height) {\r\n          // Remove element below the fold\r\n          elem.remove();\r\n        } else {\r\n          const parentComputedStyle = window.getComputedStyle(elem.parentElement);\r\n          if (\r\n            parentComputedStyle.display === 'none'\r\n            || (\r\n              parentComputedStyle.overflow === 'hidden'\r\n              && (parentComputedStyle.height === '0px' || parentComputedStyle.width === '0px')\r\n            )\r\n          ) {\r\n            // Remove hidden element\r\n            elem.remove();\r\n          }\r\n        }\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    });\r\n  }, height);\r\n\r\n  const html = await page.content();\r\n  return html;\r\n}\r\n\r\n/**\r\n * Receive resources from Puppeteer\r\n * @param  {object} options Launch options\r\n * @return {Promise<{ aboveTheFold: string, aboveTheFoldMob: string, css: string }>} Result resources\r\n */\r\nasync function puppeteerResources(options) {\r\n  const browser = await puppeteer.launch();\r\n  let cssString = '';\r\n\r\n  // Puppeteer page with desktop version\r\n  const page = await browser.newPage();\r\n  await page.setDefaultNavigationTimeout(120000);\r\n  await page.setViewport({ width: 1920, height: 1200 });\r\n  if (options.type === 'HTML') {\r\n    await page.setContent(options.html, { waitUntil: 'networkidle2'\t});\r\n    await page.addStyleTag({ content: options.css });\r\n  } else {\r\n    await page.goto(options.url, { waitUntil: 'networkidle2' });\r\n    let styleHrefs = await page.$$eval(':not(noscript) > link[rel=stylesheet]', elems => Array.from(elems).map(s => s.href));\r\n    if (!options.enableGoogleFonts) {\r\n      styleHrefs = styleHrefs.filter(href => href.indexOf('fonts.googleapis.com') === -1);\r\n    }\r\n    // Concatenate all styles\r\n    await Promise.all(styleHrefs.map(async href => {\r\n      let { data } = await get(href);\r\n      cssString += data;\r\n    }));\r\n  }\r\n\r\n  // Puppeteer page with mobile version\r\n  const page2 = await browser.newPage();\r\n  await page2.setDefaultNavigationTimeout(60000);\r\n  await page2.setViewport({ width: 480, height: 650, isMobile: true, hasTouch: true });\r\n  if (options.type === 'HTML') {\r\n    await page2.setContent(options.html, { waitUntil: 'networkidle2' });\r\n    await page2.addStyleTag({ content: options.css });\r\n  } else {\r\n    await page2.goto(options.url, { waitUntil: 'networkidle2' });\r\n  }\r\n\r\n  const aboveTheFold = await getAboveTheFoldHTML(page, 1200);\r\n  const aboveTheFoldMob = await getAboveTheFoldHTML(page2, 650);\r\n\r\n  await browser.close();\r\n\r\n  return { aboveTheFold, aboveTheFoldMob, css: cssString };\r\n}\r\n\r\n/**\r\n * Extract critical and rest CSS from HTML\r\n * @param  {string} deskHTML HTML of desktop version\r\n * @param  {string} mobHTML HTML of mobile version\r\n * @param  {string} css CSS\r\n * @param  {RegExp} whitelist Regular Expression of needed tags\r\n * @return {Promise<{ critical: string, rest: string }>} Result object with critical css and rest css\r\n */\r\nfunction extract(deskHTML, mobHTML, css, whitelist, minify) {\r\n  // Receive above-the-fold css-selectors of desktop version\r\n  let resDesk = dropcss({\r\n    css,\r\n    html: deskHTML,\r\n    shouldDrop: sel => !whitelist.test(sel)\r\n  });\r\n\r\n  // Receive above-the-fold css-selectors of mobile version\r\n  let resMob = dropcss({\r\n    css,\r\n    html: mobHTML,\r\n    shouldDrop: sel => !whitelist.test(sel)\r\n  });\r\n\r\n  let selectors = new Set();\r\n\tresDesk.sels.forEach(sel => selectors.add(sel));\r\n\tresMob.sels.forEach(sel => selectors.add(sel));\r\n\r\n  let above = dropcss({\r\n    css,\r\n    html: '',\r\n    shouldDrop: sel => !selectors.has(sel)\r\n  });\r\n\r\n  let rest = dropcss({\r\n    css,\r\n    html: '',\r\n    shouldDrop: sel => selectors.has(sel)\r\n  });\r\n\r\n  if (minify) {\r\n    const csso = require('csso');\r\n    above.css = csso.minify(above.css).css;\r\n    rest.css = csso.minify(rest.css).css;\r\n  }\r\n\r\n  return { critical: above.css, rest: rest.css };\r\n}\r\n\r\nmodule.exports = criticalCSSParser;\r\n"],"names":["httpServer","require","puppeteer","dropcss","get","async","getAboveTheFoldHTML","page","height","$$eval","elems","Array","from","forEach","elem","computedStyle","window","getComputedStyle","top","marginTop","computedTop","indexOf","Math","abs","Number","parseInt","parentElement","offsetHeight","getBoundingClientRect","pageYOffset","remove","parentComputedStyle","display","overflow","width","e","console","error","content","puppeteerResources","options","browser","launch","cssString","newPage","setDefaultNavigationTimeout","setViewport","type","setContent","html","waitUntil","addStyleTag","css","goto","url","styleHrefs","map","s","href","enableGoogleFonts","filter","Promise","all","data","page2","isMobile","hasTouch","aboveTheFold","aboveTheFoldMob","close","extract","deskHTML","mobHTML","whitelist","minify","resDesk","shouldDrop","sel","test","resMob","selectors","Set","sels","add","above","has","rest","csso","critical","module","exports","URL","entrypoint","filename","server","createServer","root","listen"],"mappings":"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"}