{"version":3,"file":"index.umd.js","sources":["../src/index.js"],"sourcesContent":["/**\r\n * Copyright (c) 2021, Anton Babakhin\r\n * All rights reserved. (MIT Licensed)\r\n *\r\n * critical-css-parser\r\n */\r\n\r\nconst httpServer = require('http-server');\r\nconst puppeteer = require('puppeteer');\r\nconst dropcss = require('dropcss');\r\nconst { get } = require('axios');\r\n\r\n/**\r\n * Receive critical and other CSS\r\n * @param  {object} options Options\r\n * @return {Promise<{ critical: string, rest: string }>} Result object with critical css and rest css\r\n */\r\nasync function criticalCSSParser(options) {\r\n  if (options.type === 'HTML') {\r\n    const {\r\n      html = '',\r\n      css = '',\r\n      whitelist = /#fooBazBarAboveTheFold8917/,\r\n      minify = false\r\n    } = options;\r\n\r\n    const { aboveTheFold, aboveTheFoldMob } = await puppeteerResources({\r\n      html,\r\n      css,\r\n      type: options.type\r\n    });\r\n\r\n    return extract(aboveTheFold, aboveTheFoldMob, css, whitelist, minify);\r\n  } else if (options.type === 'URL') {\r\n    const {\r\n      URL = '',\r\n      enableGoogleFonts = 0,\r\n      whitelist = /#fooBazBarAboveTheFold8917/,\r\n      minify = false\r\n    } = options;\r\n\r\n    const { aboveTheFold, aboveTheFoldMob, css } = await puppeteerResources({\r\n      enableGoogleFonts,\r\n      url: URL,\r\n      type: options.type\r\n    });\r\n\r\n    return extract(aboveTheFold, aboveTheFoldMob, css, whitelist, minify);\r\n  } else if (options.type === 'localServer') {\r\n    const {\r\n      entrypoint = '',\r\n      filename = 'index.html',\r\n      enableGoogleFonts = 0,\r\n      whitelist = /#fooBazBarAboveTheFold8917/,\r\n      minify = false\r\n    } = options;\r\n\r\n    // Create local server to open the page\r\n    const server = httpServer.createServer({ root: entrypoint });\r\n    server.listen(6543);\r\n\r\n    const { aboveTheFold, aboveTheFoldMob, css } = await puppeteerResources({\r\n      enableGoogleFonts,\r\n      url: `http://127.0.0.1:6543/${filename}`,\r\n      type: options.type\r\n    });\r\n\r\n    server.close();\r\n\r\n    return extract(aboveTheFold, aboveTheFoldMob, css, whitelist, minify);\r\n  }\r\n}\r\n\r\n/**\r\n * Receive above-the-fold HTML\r\n * @param  {object} page Page from Puppeteer\r\n * @param  {number} height Height of viewport\r\n * @return {Promise<string>} Result html\r\n */\r\nasync function getAboveTheFoldHTML(page, height) {\r\n  await page.$$eval('body *:not(script):not(style)', (elems, height) => {\r\n    Array.from(elems).forEach(elem => {\r\n      try {\r\n        const computedStyle = window.getComputedStyle(elem);\r\n        let top = 0;\r\n        let marginTop = 0;\r\n\r\n        const computedTop = computedStyle.top;\r\n        if (computedTop.indexOf('px') !== -1) {\r\n          top = Math.abs(Number.parseInt(computedTop, 10));\r\n        } else if (computedTop.indexOf('%') !== -1) {\r\n          const parentHeight = elem.parentElement.offsetHeight;\r\n          const percent = Math.abs(Number.parseInt(computedTop, 10));\r\n          top = (parentHeight * percent) / 100;\r\n        }\r\n\r\n        const computedMarginTop = computedStyle.marginTop;\r\n        marginTop = Math.abs(Number.parseInt(computedMarginTop, 10));\r\n\r\n        if (elem.getBoundingClientRect().top - marginTop - top + pageYOffset > height) {\r\n          // Remove element below the fold\r\n          elem.remove();\r\n        } else {\r\n          const parentComputedStyle = window.getComputedStyle(elem.parentElement);\r\n          if (\r\n            parentComputedStyle.display === 'none'\r\n            || (\r\n              parentComputedStyle.overflow === 'hidden'\r\n              && (parentComputedStyle.height === '0px' || parentComputedStyle.width === '0px')\r\n            )\r\n          ) {\r\n            // Remove hidden element\r\n            elem.remove();\r\n          }\r\n        }\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    });\r\n  }, height);\r\n\r\n  const html = await page.content();\r\n  return html;\r\n}\r\n\r\n/**\r\n * Receive resources from Puppeteer\r\n * @param  {object} options Launch options\r\n * @return {Promise<{ aboveTheFold: string, aboveTheFoldMob: string, css: string }>} Result resources\r\n */\r\nasync function puppeteerResources(options) {\r\n  const browser = await puppeteer.launch();\r\n  let cssString = '';\r\n\r\n  // Puppeteer page with desktop version\r\n  const page = await browser.newPage();\r\n  await page.setDefaultNavigationTimeout(120000);\r\n  await page.setViewport({ width: 1920, height: 1200 });\r\n  if (options.type === 'HTML') {\r\n    await page.setContent(options.html, { waitUntil: 'networkidle2'\t});\r\n    await page.addStyleTag({ content: options.css });\r\n  } else {\r\n    await page.goto(options.url, { waitUntil: 'networkidle2' });\r\n    let styleHrefs = await page.$$eval(':not(noscript) > link[rel=stylesheet]', elems => Array.from(elems).map(s => s.href));\r\n    if (!options.enableGoogleFonts) {\r\n      styleHrefs = styleHrefs.filter(href => href.indexOf('fonts.googleapis.com') === -1);\r\n    }\r\n    // Concatenate all styles\r\n    await Promise.all(styleHrefs.map(async href => {\r\n      let { data } = await get(href);\r\n      cssString += data;\r\n    }));\r\n  }\r\n\r\n  // Puppeteer page with mobile version\r\n  const page2 = await browser.newPage();\r\n  await page2.setDefaultNavigationTimeout(60000);\r\n  await page2.setViewport({ width: 480, height: 650, isMobile: true, hasTouch: true });\r\n  if (options.type === 'HTML') {\r\n    await page2.setContent(options.html, { waitUntil: 'networkidle2' });\r\n    await page2.addStyleTag({ content: options.css });\r\n  } else {\r\n    await page2.goto(options.url, { waitUntil: 'networkidle2' });\r\n  }\r\n\r\n  const aboveTheFold = await getAboveTheFoldHTML(page, 1200);\r\n  const aboveTheFoldMob = await getAboveTheFoldHTML(page2, 650);\r\n\r\n  await browser.close();\r\n\r\n  return { aboveTheFold, aboveTheFoldMob, css: cssString };\r\n}\r\n\r\n/**\r\n * Extract critical and rest CSS from HTML\r\n * @param  {string} deskHTML HTML of desktop version\r\n * @param  {string} mobHTML HTML of mobile version\r\n * @param  {string} css CSS\r\n * @param  {RegExp} whitelist Regular Expression of needed tags\r\n * @return {Promise<{ critical: string, rest: string }>} Result object with critical css and rest css\r\n */\r\nfunction extract(deskHTML, mobHTML, css, whitelist, minify) {\r\n  // Receive above-the-fold css-selectors of desktop version\r\n  let resDesk = dropcss({\r\n    css,\r\n    html: deskHTML,\r\n    shouldDrop: sel => !whitelist.test(sel)\r\n  });\r\n\r\n  // Receive above-the-fold css-selectors of mobile version\r\n  let resMob = dropcss({\r\n    css,\r\n    html: mobHTML,\r\n    shouldDrop: sel => !whitelist.test(sel)\r\n  });\r\n\r\n  let selectors = new Set();\r\n\tresDesk.sels.forEach(sel => selectors.add(sel));\r\n\tresMob.sels.forEach(sel => selectors.add(sel));\r\n\r\n  let above = dropcss({\r\n    css,\r\n    html: '',\r\n    shouldDrop: sel => !selectors.has(sel)\r\n  });\r\n\r\n  let rest = dropcss({\r\n    css,\r\n    html: '',\r\n    shouldDrop: sel => selectors.has(sel)\r\n  });\r\n\r\n  if (minify) {\r\n    const csso = require('csso');\r\n    above.css = csso.minify(above.css).css;\r\n    rest.css = csso.minify(rest.css).css;\r\n  }\r\n\r\n  return { critical: above.css, rest: rest.css };\r\n}\r\n\r\nmodule.exports = criticalCSSParser;\r\n"],"names":["puppeteerResources","options","puppeteer","launch","browser","cssString","newPage","page","setDefaultNavigationTimeout","setViewport","width","height","page2","isMobile","hasTouch","getAboveTheFoldHTML","aboveTheFold","aboveTheFoldMob","close","css","type","setContent","html","waitUntil","addStyleTag","content","url","$$eval","elems","Array","from","map","s","href","styleHrefs","enableGoogleFonts","filter","indexOf","Promise","all","get","data","forEach","elem","marginTop","computedStyle","window","getComputedStyle","top","computedTop","Math","abs","Number","parseInt","parentElement","offsetHeight","getBoundingClientRect","pageYOffset","remove","parentComputedStyle","display","overflow","e","console","error","httpServer","require","dropcss","extract","deskHTML","mobHTML","whitelist","minify","resDesk","shouldDrop","sel","test","resMob","selectors","Set","sels","add","above","has","rest","csso","critical","module","exports","URL","entrypoint","filename","server","createServer","root","listen"],"mappings":"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"}