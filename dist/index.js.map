{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["/**\r\n * Copyright (c) 2019, Anton Babakhin\r\n * All rights reserved. (MIT Licensed)\r\n * \r\n * critical-css-parser\r\n */\r\n\r\nconst httpServer = require('http-server');\r\nconst puppeteer = require('puppeteer');\r\nconst dropcss = require('dropcss');\r\nconst { get } = require('axios');\r\n\r\n/**\r\n * Receive critical and other CSS\r\n * @param  {object} options Options\r\n * @return {Promise<{ critical: string, rest: string }>} Result object with critical css and rest css\r\n */\r\nasync function criticalCSSParser( options ) {\r\n  \tif( options.type === 'HTML' ) {\r\n\t\tconst { html = '', css = '', whitelist = /#fooBazBarAboveTheFold8917/, minify = false } = options;\r\n\t\t\r\n\t\tconst browser = await puppeteer.launch();\r\n\r\n\t\t// Puppeteer page with desktop version\r\n\t\tconst page = await browser.newPage();\r\n\t\tawait page.setDefaultNavigationTimeout( 60000 );\r\n\t\tawait page.setContent(html, { waitUntil: 'networkidle2'\t});\r\n\t\tawait page.addStyleTag({ content: css });\r\n\t\tawait page.setViewport({ width: 1920, height: 1200 });\r\n\r\n\t\t// Puppeteer page with mobile version\r\n\t\tconst page2 = await browser.newPage();\r\n\t\tawait page2.setDefaultNavigationTimeout( 60000 );\r\n\t\tawait page2.setContent(html, { waitUntil: 'networkidle2' });\r\n\t\tawait page2.addStyleTag({ content: css });\r\n\t\tawait page2.setViewport({ width: 480, height: 650, isMobile: true, hasTouch: true });\r\n\t\t\r\n\t\tconst aboveTheFold = await aboveTheFoldHTML( page, 1200 );\r\n\t\tconst aboveTheFoldMob = await aboveTheFoldHTML( page2, 650 );\r\n\r\n\t\tawait browser.close();\r\n\r\n\t\tconst result = extract( aboveTheFold, aboveTheFoldMob, css, whitelist, minify );\r\n\t\treturn result;\r\n\r\n\t} else if( options.type === 'URL' ) {\r\n\t\tconst { URL = '', enableGoogleFonts = 0, whitelist = /#fooBazBarAboveTheFold8917/, minify = false } = options;\r\n\t\t\r\n\t\tconst browser = await puppeteer.launch();\r\n\r\n\t\t// Puppeteer page with desktop version\r\n\t\tconst page = await browser.newPage();\r\n\t\tawait page.setDefaultNavigationTimeout( 60000 );\r\n\t\tawait page.goto(URL, { waitUntil: 'networkidle2' });\t\t\r\n\t\tawait page.setViewport({ width: 1920, height: 1200 });\r\n\t\tlet styleHrefs = await page.$$eval('link[rel=stylesheet]', els => Array.from(els).map(s => s.href));\r\n\t\tif( !enableGoogleFonts ) {\r\n\t\t\tstyleHrefs = styleHrefs.filter( href => href.indexOf('fonts.googleapis.com') === -1 );\r\n\t\t}\r\n\r\n\t\t// Puppeteer page with mobile version\r\n\t\tconst page2 = await browser.newPage();\r\n\t\tawait page2.setDefaultNavigationTimeout( 60000 );\r\n\t\tawait page2.goto(URL, { waitUntil: 'networkidle2' });\t\t\r\n\t\tawait page2.setViewport({ width: 480, height: 650, isMobile: true, hasTouch: true }); \r\n\t\t\r\n\t\tconst aboveTheFold = await aboveTheFoldHTML( page, 1200 );\r\n\t\tconst aboveTheFoldMob = await aboveTheFoldHTML( page2, 650 );\r\n\r\n\t\tawait browser.close();\r\n\r\n\t\t// Concatenate all styles \r\n\t\tlet css = '';\r\n\t\tawait Promise.all(styleHrefs.map(async href => {\r\n\t\t\tlet { data } = await get(href);\r\n\t\t\tcss += data;\r\n\t\t}));\r\n\r\n\t\tconst result = extract( aboveTheFold, aboveTheFoldMob, css, whitelist, minify );\r\n\t\treturn result;\t\r\n\t\t\r\n\t} else if( options.type === 'localServer' ) {\r\n\t\tconst { entrypoint = '', filename = 'index.html', enableGoogleFonts = 0, whitelist = /#fooBazBarAboveTheFold8917/, minify = false } = options;\r\n\t\t\r\n\t\t// Create local server to open the page\r\n\t\tconst server = httpServer.createServer({root: entrypoint});\r\n\t\tserver.listen(6543);\r\n\t\t\r\n\t\tconst browser = await puppeteer.launch();\r\n\r\n\t\t// Puppeteer page with desktop version\r\n\t\tconst page = await browser.newPage();\r\n\t\tawait page.setDefaultNavigationTimeout( 60000 );\r\n\t\tawait page.goto(`http://127.0.0.1:6543/${filename}`, { waitUntil: 'networkidle2' });\t\t\r\n\t\tawait page.setViewport({ width: 1920, height: 1200 });\r\n\t\tlet styleHrefs = await page.$$eval('link[rel=stylesheet]', els => Array.from(els).map(s => s.href));\r\n\t\tif( !enableGoogleFonts ) {\r\n\t\t\tstyleHrefs = styleHrefs.filter( href => href.indexOf('fonts.googleapis.com') === -1 );\r\n\t\t}\r\n\r\n\t\t// Puppeteer page with mobile version\r\n\t\tconst page2 = await browser.newPage();\r\n\t\tawait page2.setDefaultNavigationTimeout( 60000 );\r\n\t\tawait page2.goto(`http://127.0.0.1:6543/${filename}`, { waitUntil: 'networkidle2' });\t\t\r\n\t\tawait page2.setViewport({ width: 480, height: 650, isMobile: true, hasTouch: true }); \r\n\t\t\r\n\t\tconst aboveTheFold = await aboveTheFoldHTML( page, 1200 );\r\n\t\tconst aboveTheFoldMob = await aboveTheFoldHTML( page2, 650 );\r\n\r\n\t\tawait browser.close();\r\n\r\n\t\t// Concatenate all styles \r\n\t\tlet css = '';\r\n\t\tawait Promise.all(styleHrefs.map(async href => {\r\n\t\t\tlet { data } = await get(href);\r\n\t\t\tcss += data;\r\n\t\t}));\r\n\r\n\t\tserver.close();\r\n\r\n\t\tconst result = extract( aboveTheFold, aboveTheFoldMob, css, whitelist, minify );\r\n\t\treturn result;\t\r\n\t}\r\n}\r\n\r\n/**\r\n * Receive above-the-fold HTML\r\n * @param  {object} page Page from Puppeteer\r\n * @param  {number} height Height of viewport \r\n * @return {Promise<string>} Result html\r\n */\r\nasync function aboveTheFoldHTML( page, height ) {\r\n\tawait page.$$eval('body *:not(script):not(style)', ( elems, height ) => {\r\n\t\tArray.from(elems).forEach(elem => {\t\t\t\r\n\t\t\tif( elem.getBoundingClientRect()['top'] + pageYOffset > height ) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\t// Remove element below the fold\r\n\t\t\t\t\telem.remove();\r\n\t\t\t\t} catch( e ) {\r\n\t\t\t\t\tconsole.log(e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}, height);\r\n\r\n\tconst html = await page.content();\r\n\treturn html;\r\n}\r\n\r\n/**\r\n * Extract critical and rest CSS from HTML\r\n * @param  {string} deskHTML HTML of desktop version\r\n * @param  {string} mobHTML HTML of mobile version\r\n * @param  {string} css CSS \r\n * @param  {RegExp} whitelist Regular Expression of needed tags \r\n * @return {Promise<{ critical: string, rest: string }>} Result object with critical css and rest css\r\n */\r\nfunction extract( deskHTML, mobHTML, css, whitelist, minify ) {\r\n\t// Receive above-the-fold css-selectors of desktop version\r\n\tlet resDesk = dropcss({\r\n\t\thtml: deskHTML,\r\n\t\tcss,\r\n\t\tshouldDrop: ( sel ) => {\r\n\t\t\tif ( whitelist.test( sel ) )\r\n\t\t\t\t\treturn false;\r\n\t\t\telse {\t\t\t\t\t\t\t\r\n\t\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t},\r\n\t});\r\n\r\n\t// Receive above-the-fold css-selectors of mobile version\r\n\tlet resMob = dropcss({\r\n\t\thtml: mobHTML,\r\n\t\tcss,\r\n\t\tshouldDrop: ( sel ) => {\r\n\t\t\tif ( whitelist.test( sel ) )\r\n\t\t\t\t\treturn false;\r\n\t\t\telse {\t\t\t\t\t\t\t\r\n\t\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t},\r\n\t});\r\n\r\n\tlet selectors = new Set();\r\n\tresDesk.sels.forEach( sel => selectors.add( sel ) );\r\n\tresMob.sels.forEach( sel => selectors.add( sel ) );\r\n\r\n\tlet above = dropcss({\r\n\t\thtml: '',\r\n\t\tcss,\r\n\t\tshouldDrop: sel => !selectors.has( sel ),\r\n\t});\r\n\r\n\tlet rest = dropcss({\r\n\t\thtml: '',\r\n\t\tcss,\r\n\t\tshouldDrop: sel => selectors.has( sel ),\r\n\t});\r\n\r\n\tif ( minify ) {\r\n\t\tconst csso = require('csso');\r\n\t\tabove.css = csso.minify( above.css ).css;\r\n\t\trest.css = csso.minify( rest.css ).css;\r\n\t}\r\n\r\n\treturn { critical: above.css, rest: rest.css };\r\n}\r\n\r\nmodule.exports = criticalCSSParser;\r\n"],"names":["aboveTheFoldHTML","page","height","$$eval","elems","Array","from","forEach","elem","getBoundingClientRect","pageYOffset","remove","e","console","log","content","httpServer","require","puppeteer","dropcss","get","extract","deskHTML","mobHTML","css","whitelist","minify","resDesk","html","shouldDrop","sel","test","resMob","selectors","Set","sels","add","above","has","rest","csso","critical","module","exports","options","type","launch","browser","newPage","setDefaultNavigationTimeout","setContent","waitUntil","addStyleTag","setViewport","width","page2","isMobile","hasTouch","aboveTheFold","aboveTheFoldMob","close","URL","enableGoogleFonts","els","map","s","href","styleHrefs","filter","indexOf","Promise","all","data","entrypoint","filename","server","createServer","root","listen"],"mappings":"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"}