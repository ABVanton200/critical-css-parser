{"version":3,"file":"index.mjs","sources":["../src/index.js"],"sourcesContent":["/**\r\n * Copyright (c) 2019, Anton Babakhin\r\n * All rights reserved. (MIT Licensed)\r\n * \r\n * critical-css-parser\r\n */\r\n\r\nconst httpServer = require('http-server');\r\nconst puppeteer = require('puppeteer');\r\nconst dropcss = require('dropcss');\r\nconst { get } = require('axios');\r\n\r\n/**\r\n * Receive critical and other CSS\r\n * @param  {object} options Options\r\n * @return {Promise<{ critical: string, rest: string }>} Result object with critical css and rest css\r\n */\r\nasync function criticalCSSParser( options ) {\r\n  \tif( options.type === 'HTML' ) {\r\n\t\tconst { html = '', css = '', whitelist = /#fooBazBarAboveTheFold8917/, minify = false } = options;\r\n\t\t\r\n\t\tconst browser = await puppeteer.launch();\r\n\r\n\t\t// Puppeteer page with desktop version\r\n\t\tconst page = await browser.newPage();\r\n\t\tawait page.setDefaultNavigationTimeout( 60000 );\r\n\t\tawait page.setContent(html, { waitUntil: 'networkidle2'\t});\r\n\t\tawait page.addStyleTag({ content: css });\r\n\t\tawait page.setViewport({ width: 1920, height: 1200 });\r\n\r\n\t\t// Puppeteer page with mobile version\r\n\t\tconst page2 = await browser.newPage();\r\n\t\tawait page2.setDefaultNavigationTimeout( 60000 );\r\n\t\tawait page2.setContent(html, { waitUntil: 'networkidle2' });\r\n\t\tawait page2.addStyleTag({ content: css });\r\n\t\tawait page2.setViewport({ width: 480, height: 650, isMobile: true, hasTouch: true });\r\n\t\t\r\n\t\tconst aboveTheFold = await aboveTheFoldHTML( page, 1200 );\r\n\t\tconst aboveTheFoldMob = await aboveTheFoldHTML( page2, 650 );\r\n\r\n\t\tawait browser.close();\r\n\r\n\t\tconst result = extract( aboveTheFold, aboveTheFoldMob, css, whitelist, minify );\r\n\t\treturn result;\r\n\r\n\t} else if( options.type === 'URL' ) {\r\n\t\tconst { URL = '', enableGoogleFonts = 0, whitelist = /#fooBazBarAboveTheFold8917/, minify = false } = options;\r\n\t\t\r\n\t\tconst browser = await puppeteer.launch();\r\n\r\n\t\t// Puppeteer page with desktop version\r\n\t\tconst page = await browser.newPage();\r\n\t\tawait page.setDefaultNavigationTimeout( 60000 );\r\n\t\tawait page.goto(URL, { waitUntil: 'networkidle2' });\t\t\r\n\t\tawait page.setViewport({ width: 1920, height: 1200 });\r\n\t\tlet styleHrefs = await page.$$eval('link[rel=stylesheet]', els => Array.from(els).map(s => s.href));\r\n\t\tif( !enableGoogleFonts ) {\r\n\t\t\tstyleHrefs = styleHrefs.filter( href => href.indexOf('fonts.googleapis.com') === -1 );\r\n\t\t}\r\n\r\n\t\t// Puppeteer page with mobile version\r\n\t\tconst page2 = await browser.newPage();\r\n\t\tawait page2.setDefaultNavigationTimeout( 60000 );\r\n\t\tawait page2.goto(URL, { waitUntil: 'networkidle2' });\t\t\r\n\t\tawait page2.setViewport({ width: 480, height: 650, isMobile: true, hasTouch: true }); \r\n\t\t\r\n\t\tconst aboveTheFold = await aboveTheFoldHTML( page, 1200 );\r\n\t\tconst aboveTheFoldMob = await aboveTheFoldHTML( page2, 650 );\r\n\r\n\t\tawait browser.close();\r\n\r\n\t\t// Concatenate all styles \r\n\t\tlet css = '';\r\n\t\tawait Promise.all(styleHrefs.map(async href => {\r\n\t\t\tlet { data } = await get(href);\r\n\t\t\tcss += data;\r\n\t\t}));\r\n\r\n\t\tconst result = extract( aboveTheFold, aboveTheFoldMob, css, whitelist, minify );\r\n\t\treturn result;\t\r\n\t\t\r\n\t} else if( options.type === 'localServer' ) {\r\n\t\tconst { entrypoint = '', filename = 'index.html', enableGoogleFonts = 0, whitelist = /#fooBazBarAboveTheFold8917/, minify = false } = options;\r\n\t\t\r\n\t\t// Create local server to open the page\r\n\t\tconst server = httpServer.createServer({root: entrypoint});\r\n\t\tserver.listen(6543);\r\n\t\t\r\n\t\tconst browser = await puppeteer.launch();\r\n\r\n\t\t// Puppeteer page with desktop version\r\n\t\tconst page = await browser.newPage();\r\n\t\tawait page.setDefaultNavigationTimeout( 60000 );\r\n\t\tawait page.goto(`http://127.0.0.1:6543/${filename}`, { waitUntil: 'networkidle2' });\t\t\r\n\t\tawait page.setViewport({ width: 1920, height: 1200 });\r\n\t\tlet styleHrefs = await page.$$eval('link[rel=stylesheet]', els => Array.from(els).map(s => s.href));\r\n\t\tif( !enableGoogleFonts ) {\r\n\t\t\tstyleHrefs = styleHrefs.filter( href => href.indexOf('fonts.googleapis.com') === -1 );\r\n\t\t}\r\n\r\n\t\t// Puppeteer page with mobile version\r\n\t\tconst page2 = await browser.newPage();\r\n\t\tawait page2.setDefaultNavigationTimeout( 60000 );\r\n\t\tawait page2.goto(`http://127.0.0.1:6543/${filename}`, { waitUntil: 'networkidle2' });\t\t\r\n\t\tawait page2.setViewport({ width: 480, height: 650, isMobile: true, hasTouch: true }); \r\n\t\t\r\n\t\tconst aboveTheFold = await aboveTheFoldHTML( page, 1200 );\r\n\t\tconst aboveTheFoldMob = await aboveTheFoldHTML( page2, 650 );\r\n\r\n\t\tawait browser.close();\r\n\r\n\t\t// Concatenate all styles \r\n\t\tlet css = '';\r\n\t\tawait Promise.all(styleHrefs.map(async href => {\r\n\t\t\tlet { data } = await get(href);\r\n\t\t\tcss += data;\r\n\t\t}));\r\n\r\n\t\tserver.close();\r\n\r\n\t\tconst result = extract( aboveTheFold, aboveTheFoldMob, css, whitelist, minify );\r\n\t\treturn result;\t\r\n\t}\r\n}\r\n\r\n/**\r\n * Receive above-the-fold HTML\r\n * @param  {object} page Page from Puppeteer\r\n * @param  {number} height Height of viewport \r\n * @return {Promise<string>} Result html\r\n */\r\nasync function aboveTheFoldHTML( page, height ) {\r\n\tawait page.$$eval('body *:not(script):not(style)', ( elems, height ) => {\r\n\t\tArray.from(elems).forEach(elem => {\t\t\t\r\n\t\t\tif( elem.getBoundingClientRect()['top'] + pageYOffset > height ) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\t// Remove element below the fold\r\n\t\t\t\t\telem.remove();\r\n\t\t\t\t} catch( e ) {\r\n\t\t\t\t\tconsole.log(e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}, height);\r\n\r\n\tconst html = await page.content();\r\n\treturn html;\r\n}\r\n\r\n/**\r\n * Extract critical and rest CSS from HTML\r\n * @param  {string} deskHTML HTML of desktop version\r\n * @param  {string} mobHTML HTML of mobile version\r\n * @param  {string} css CSS \r\n * @param  {RegExp} whitelist Regular Expression of needed tags \r\n * @return {Promise<{ critical: string, rest: string }>} Result object with critical css and rest css\r\n */\r\nfunction extract( deskHTML, mobHTML, css, whitelist, minify ) {\r\n\t// Receive above-the-fold css-selectors of desktop version\r\n\tlet resDesk = dropcss({\r\n\t\thtml: deskHTML,\r\n\t\tcss,\r\n\t\tshouldDrop: ( sel ) => {\r\n\t\t\tif ( whitelist.test( sel ) )\r\n\t\t\t\t\treturn false;\r\n\t\t\telse {\t\t\t\t\t\t\t\r\n\t\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t},\r\n\t});\r\n\r\n\t// Receive above-the-fold css-selectors of mobile version\r\n\tlet resMob = dropcss({\r\n\t\thtml: mobHTML,\r\n\t\tcss,\r\n\t\tshouldDrop: ( sel ) => {\r\n\t\t\tif ( whitelist.test( sel ) )\r\n\t\t\t\t\treturn false;\r\n\t\t\telse {\t\t\t\t\t\t\t\r\n\t\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t},\r\n\t});\r\n\r\n\tlet selectors = new Set();\r\n\tresDesk.sels.forEach( sel => selectors.add( sel ) );\r\n\tresMob.sels.forEach( sel => selectors.add( sel ) );\r\n\r\n\tlet above = dropcss({\r\n\t\thtml: '',\r\n\t\tcss,\r\n\t\tshouldDrop: sel => !selectors.has( sel ),\r\n\t});\r\n\r\n\tlet rest = dropcss({\r\n\t\thtml: '',\r\n\t\tcss,\r\n\t\tshouldDrop: sel => selectors.has( sel ),\r\n\t});\r\n\r\n\tif ( minify ) {\r\n\t\tconst csso = require('csso');\r\n\t\tabove.css = csso.minify( above.css ).css;\r\n\t\trest.css = csso.minify( rest.css ).css;\r\n\t}\r\n\r\n\treturn { critical: above.css, rest: rest.css };\r\n}\r\n\r\nmodule.exports = criticalCSSParser;\r\n"],"names":["aboveTheFoldHTML","page","height","$$eval","elems","Array","from","forEach","elem","getBoundingClientRect","pageYOffset","remove","e","console","log","content","httpServer","require","puppeteer","dropcss","extract","deskHTML","mobHTML","css","whitelist","minify","resDesk","html","shouldDrop","sel","test","resMob","selectors","Set","sels","add","above","has","rest","csso","critical","module","exports","options","type","launch","browser","newPage","setDefaultNavigationTimeout","setContent","waitUntil","addStyleTag","setViewport","width","page2","isMobile","hasTouch","aboveTheFold","aboveTheFoldMob","close","goto","URL","els","map","s","href","styleHrefs","enableGoogleFonts","filter","indexOf","Promise","all","get","ref","server","createServer","root","entrypoint","listen","filename"],"mappings":"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"}